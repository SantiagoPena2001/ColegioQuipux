/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.com.quipux.colegioquipux.service;

import co.com.quipux.colegioquipux.manager.impl.DescripcionManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.EstudianteManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.GradoManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.GradoMateriaManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.GrupoManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.MateriaManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.NotasManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.PlanManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.ProfesorManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.ProfesorMateriaManagerImpl;
import co.com.quipux.colegioquipux.models.dto.DescripcionDTO;
import co.com.quipux.colegioquipux.models.dto.PlanDTO;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Verde
 */
public class DescripcionPlan extends javax.swing.JFrame {

    DefaultTableModel modelo = new DefaultTableModel();
    ProfesorManagerImpl profesorManager = new ProfesorManagerImpl();
    PlanManagerImpl planManager = new PlanManagerImpl();
    DescripcionManagerImpl descripcionManager = new DescripcionManagerImpl();
    EstudianteManagerImpl estudianteManager = new EstudianteManagerImpl();
    GradoManagerImpl gradoManager = new GradoManagerImpl();
    GradoMateriaManagerImpl gradoMateriaManager = new GradoMateriaManagerImpl();
    GrupoManagerImpl grupoManager = new GrupoManagerImpl();
    MateriaManagerImpl materiaManager = new MateriaManagerImpl();
    NotasManagerImpl notasManager = new NotasManagerImpl();
    ProfesorMateriaManagerImpl profesorMateriaManager = new ProfesorMateriaManagerImpl();

    public static String[] AgregarElementosTabla(DescripcionDTO descripcion, String nombrePlan) {

        String Dato[] = new String[3];
        Dato[0] = Integer.toString(descripcion.getIdDescripcionPlan());
        Dato[1] = nombrePlan;
        Dato[2] = descripcion.getDescripcion();
        return Dato;
    }

    /**
     * Creates new form ConsultarSimpleProfesor
     */
    public DescripcionPlan(ProfesorManagerImpl profesorManagerRe, PlanManagerImpl planManagerRe, DescripcionManagerImpl descripcionManagerRe, EstudianteManagerImpl estudianteManagerRe, GradoManagerImpl gradoManagerRe, GradoMateriaManagerImpl gradoMateriaManagerRe, GrupoManagerImpl grupoManagerRe, MateriaManagerImpl materiaManagerRe, NotasManagerImpl notasManagerRe, ProfesorMateriaManagerImpl profesorMateriaManagerRe) {
        profesorManager = profesorManagerRe;
        planManager = planManagerRe;
        descripcionManager = descripcionManagerRe;
        estudianteManager = estudianteManagerRe;
        gradoManager = gradoManagerRe;
        gradoMateriaManager = gradoMateriaManagerRe;
        grupoManager = grupoManagerRe;
        materiaManager = materiaManagerRe;
        notasManager = notasManagerRe;
        profesorMateriaManager = profesorMateriaManagerRe;
        initComponents();
        modelo.addColumn("IdDescripcionPlan");
        modelo.addColumn("NombrePlan");
        modelo.addColumn("Descripcion");
        jTable1.setModel(modelo);
        NombrePlan.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                NombrePlan.setText("");
            }
        });
        Descripcion.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                Descripcion.setText("");
            }
        });
        Eliminar1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                Eliminar1.setText("");
            }
        });
        Id.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                Id.setText("");
            }
        });
        Jopcion.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                Jopcion.setText("");
            }
        });
    }

    public DescripcionPlan() {
        initComponents();
    }

    public static boolean isNumeric(String str) {
        return str.matches("-?\\d+(\\.\\d+)?");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        NombrePlan = new javax.swing.JTextField();
        Descripcion = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        Consulta1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        Eliminar1 = new javax.swing.JTextField();
        Jopcion = new javax.swing.JTextField();
        Consulta2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        Id = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(650, 650));
        getContentPane().setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jTable1.setToolTipText("");
        jTable1.setEnabled(false);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 230, 548, 253);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("Registro");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(50, 10, 90, 22);

        NombrePlan.setText("Nombre Del Plan");
        NombrePlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombrePlanActionPerformed(evt);
            }
        });
        getContentPane().add(NombrePlan);
        NombrePlan.setBounds(40, 40, 130, 30);

        Descripcion.setText("Descripcion o Nombre De La Actividad Del Plan");
        getContentPane().add(Descripcion);
        Descripcion.setBounds(40, 80, 360, 30);

        jButton1.setText("Registrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(10, 120, 120, 30);

        jButton2.setText("Refrescar Tabla");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(480, 200, 140, 23);

        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(500, 30, 120, 23);

        Consulta1.setText("Consultar");
        Consulta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Consulta1ActionPerformed(evt);
            }
        });
        getContentPane().add(Consulta1);
        Consulta1.setBounds(490, 150, 130, 23);

        jButton4.setText("Volver a Inicio");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(320, 200, 140, 23);

        Eliminar1.setText("Id de la Descripcion a eliminar o a consultar");
        getContentPane().add(Eliminar1);
        Eliminar1.setBounds(250, 30, 240, 40);
        getContentPane().add(Jopcion);
        Jopcion.setBounds(410, 110, 210, 30);

        Consulta2.setText("Consultar");
        Consulta2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Consulta2ActionPerformed(evt);
            }
        });
        getContentPane().add(Consulta2);
        Consulta2.setBounds(500, 60, 120, 23);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel1.setText("Consultar Por Plan");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(280, 110, 170, 30);

        jButton5.setText("Modificar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(10, 160, 120, 30);

        Id.setText("Id Del Plan A Modificar");
        getContentPane().add(Id);
        Id.setBounds(140, 160, 250, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NombrePlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombrePlanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NombrePlanActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (NombrePlan.getText().equals("Nombre Del Plan") || Descripcion.getText().equals("Descripcion o Nombre De La Actividad Del Plan") || NombrePlan.getText().length() == 0 || Descripcion.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Debe rellenar el campo");
        } else {
            if (planManager.consultarPlan(Integer.parseInt(NombrePlan.getText())) != null) {
                DescripcionDTO descripcion = new DescripcionDTO();
                PlanDTO plan = new PlanDTO();
                plan = planManager.consultarPlanNombre(NombrePlan.getText());
                descripcion.setIdPlan(plan.getIdPlan());
                descripcion.setDescripcion(Descripcion.getText());
                descripcionManager.registrarDescripcionPlan(descripcion);
                this.jButton2ActionPerformed(evt);
                NombrePlan.setText("Nombre Del Plan");
                Descripcion.setText("Descripcion o Nombre De La Actividad Del Plan");
            } else {
                JOptionPane.showMessageDialog(null, "El plan ingresado no ha sido registrado");
                NombrePlan.setText("Nombre Del Plan");
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        modelo.setRowCount(0);
        ArrayList<DescripcionDTO> listaDescripcion = descripcionManager.traerListaDescripcionPlan();
        for (DescripcionDTO descripcion : listaDescripcion) {
            PlanDTO plan = new PlanDTO();
            plan = planManager.consultarPlan(descripcion.getIdPlan());
            String Dato[] = DescripcionPlan.AgregarElementosTabla(descripcion, plan.getNombrePlan());
            modelo.addRow(Dato);
        }

        jTable1.setModel(modelo);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (Eliminar1.getText().equals("Id de la Descripcion a eliminar o a consultar") || Eliminar1.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Debes rellenar el campo");
        } else {
            if (Eliminar1.getText().length() == 0) {
                if (descripcionManager.consultarDescripcion(Integer.parseInt(Eliminar1.getText())) != null) {
                    Eliminar1.setText("Id de la Descripcion a eliminar o a consultar");
                    descripcionManager.eliminarDescripcionPlan(Integer.parseInt(Eliminar1.getText()));
                    this.jButton2ActionPerformed(evt);
                    JOptionPane.showMessageDialog(null, "Se ha eliminado la descripcion");
                } else {
                    JOptionPane.showMessageDialog(null, "El Id ingresado no se encuentra registrado");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El Id de la descripcion debe ser un caracter numerico");
            }
        }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void Consulta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Consulta1ActionPerformed

        if (Jopcion.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Debe rellenar el campo");
        } else {
            if (planManager.consultarPlan(Integer.parseInt(Jopcion.getText())) != null) {
                PlanDTO plan = new PlanDTO();
                modelo.setRowCount(0);
                plan = planManager.consultarPlanNombre(Jopcion.getText());
                ArrayList<DescripcionDTO> listaDescripcion = descripcionManager.consultarDescripcionPorPlan(plan.getIdPlan());
                for (DescripcionDTO descripcionD : listaDescripcion) {
                    String Dato[] = DescripcionPlan.AgregarElementosTabla(descripcionD, plan.getNombrePlan());
                    modelo.addRow(Dato);
                }
                Jopcion.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "El plan ingresado no ha sido registrado");
                Jopcion.setText("");
            }
        }
    }//GEN-LAST:event_Consulta1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        InicioA c = new InicioA(profesorManager, planManager, descripcionManager, estudianteManager, gradoManager, gradoMateriaManager, grupoManager, materiaManager, notasManager, profesorMateriaManager);
        dispose();
        c.setVisible(true);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void Consulta2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Consulta2ActionPerformed

        if (Eliminar1.getText().equals("Id de la Descripcion a eliminar o a consultar") || Eliminar1.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Debes rellenar el campo");
        } else {
            if (Eliminar1.getText().length() == 0) {
                if (descripcionManager.consultarDescripcion(Integer.parseInt(Eliminar1.getText())) != null) {
                    DescripcionDTO descripcion = new DescripcionDTO();
                    descripcion = descripcionManager.consultarDescripcion(Integer.parseInt(Eliminar1.getText()));
                    modelo.setRowCount(0);
                    PlanDTO plan = new PlanDTO();
                    plan = planManager.consultarPlan(descripcion.getIdPlan());
                    String Dato[] = DescripcionPlan.AgregarElementosTabla(descripcion, plan.getNombrePlan());
                    modelo.addRow(Dato);
                    Eliminar1.setText("Id de la Descripcion a eliminar o a consultar");
                } else {
                    JOptionPane.showMessageDialog(null, "El Id ingresado no se encuentra registrado");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El Id de la descripcion debe ser un caracter numerico");
            }
        }


    }//GEN-LAST:event_Consulta2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        if (NombrePlan.getText().equals("Nombre Del Plan") || Descripcion.getText().equals("Descripcion o Nombre De La Actividad Del Plan") || Id.getText().equals("Id Del Plan A Modificar") || NombrePlan.getText().length() == 0 || Descripcion.getText().length() == 0 || Id.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Debe rellenar el campo");
        } else {
            if (this.isNumeric(Id.getText())) {
                if (planManager.consultarPlan(Integer.parseInt(NombrePlan.getText())) != null) {
                    if (descripcionManager.consultarDescripcion(Integer.parseInt(Id.getText())) != null) {
                        DescripcionDTO descripcion = new DescripcionDTO();
                        PlanDTO plan = new PlanDTO();
                        plan = planManager.consultarPlanNombre(NombrePlan.getText());
                        descripcion.setIdPlan(plan.getIdPlan());
                        descripcion.setDescripcion(Descripcion.getText());
                        descripcionManager.modificarDescripcionPlan(descripcion, Integer.parseInt(Id.getText()));
                        this.jButton2ActionPerformed(evt);
                        NombrePlan.setText("Nombre Del Plan");
                        Descripcion.setText("Descripcion o Nombre De La Actividad Del Plan");
                        Id.setText("Id Del Plan A Modificar");
                    } else {
                        JOptionPane.showMessageDialog(null, "El Id de la descripcion del plan ingresado no ha sido registrado");
                        Id.setText("Id Del Plan A Modificar");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El plan ingresado no ha sido registrado");
                    NombrePlan.setText("Nombre Del Plan");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El Id de la descripcion del plan debe ser un caracter");
                Id.setText("Id Del Plan A Modificar");
            }
        }


    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DescripcionPlan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DescripcionPlan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DescripcionPlan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DescripcionPlan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Consulta1;
    private javax.swing.JButton Consulta2;
    private javax.swing.JTextField Descripcion;
    private javax.swing.JTextField Eliminar1;
    private javax.swing.JTextField Id;
    private javax.swing.JTextField Jopcion;
    private javax.swing.JTextField NombrePlan;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
