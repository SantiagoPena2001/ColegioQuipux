/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.com.quipux.colegioquipux.service;

import co.com.quipux.colegioquipux.manager.impl.DescripcionManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.EstudianteManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.GradoManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.GradoMateriaManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.GrupoManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.MateriaManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.NotasManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.PlanManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.ProfesorManagerImpl;
import co.com.quipux.colegioquipux.manager.impl.ProfesorMateriaManagerImpl;
import co.com.quipux.colegioquipux.models.dto.MateriaDTO;
import co.com.quipux.colegioquipux.models.dto.ProfesorDTO;
import co.com.quipux.colegioquipux.models.dto.ProfesorMateriaDTO;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Verde
 */
public class ProfesorMateria extends javax.swing.JFrame {

    DefaultTableModel modelo = new DefaultTableModel();
    ProfesorManagerImpl profesorManager = new ProfesorManagerImpl();
    PlanManagerImpl planManager = new PlanManagerImpl();
    DescripcionManagerImpl descripcionManager = new DescripcionManagerImpl();
    EstudianteManagerImpl estudianteManager = new EstudianteManagerImpl();
    GradoManagerImpl gradoManager = new GradoManagerImpl();
    GradoMateriaManagerImpl gradoMateriaManager = new GradoMateriaManagerImpl();
    GrupoManagerImpl grupoManager = new GrupoManagerImpl();
    MateriaManagerImpl materiaManager = new MateriaManagerImpl();
    NotasManagerImpl notasManager = new NotasManagerImpl();
    ProfesorMateriaManagerImpl profesorMateriaManager = new ProfesorMateriaManagerImpl();

    public static String[] AgregarElementosTabla(ProfesorMateriaDTO profesorMateria, String nombreMateria, String nombreProfesor, String apellido) {

        String Dato[] = new String[3];
        Dato[0] = Integer.toString(profesorMateria.getIdProfesorMateria());
        Dato[1] = nombreMateria;
        Dato[2] = nombreProfesor + " " + apellido;
        return Dato;
    }

    /**
     * Creates new form ConsultarSimpleProfesor
     */
    public ProfesorMateria(ProfesorManagerImpl profesorManagerRe, PlanManagerImpl planManagerRe, DescripcionManagerImpl descripcionManagerRe, EstudianteManagerImpl estudianteManagerRe, GradoManagerImpl gradoManagerRe, GradoMateriaManagerImpl gradoMateriaManagerRe, GrupoManagerImpl grupoManagerRe, MateriaManagerImpl materiaManagerRe, NotasManagerImpl notasManagerRe, ProfesorMateriaManagerImpl profesorMateriaManagerRe) {
        profesorManager = profesorManagerRe;
        planManager = planManagerRe;
        descripcionManager = descripcionManagerRe;
        estudianteManager = estudianteManagerRe;
        gradoManager = gradoManagerRe;
        gradoMateriaManager = gradoMateriaManagerRe;
        grupoManager = grupoManagerRe;
        materiaManager = materiaManagerRe;
        notasManager = notasManagerRe;
        profesorMateriaManager = profesorMateriaManagerRe;
        initComponents();
        modelo.addColumn("IdProfesorMateria");
        modelo.addColumn("NombreMateria");
        modelo.addColumn("NombreProfesor");
        jTable1.setModel(modelo);

        Jmateria.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                Jmateria.setText("");
            }
        });
        Eliminar1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                Eliminar1.setText("");
            }
        });
        JIdProfesor.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                JIdProfesor.setText("");
            }
        });

    }

    public static boolean isNumeric(String str) {
        return str.matches("-?\\d+(\\.\\d+)?");
    }

    public ProfesorMateria() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        JIdProfesor = new javax.swing.JTextField();
        Jmateria = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        Consulta1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        Eliminar1 = new javax.swing.JTextField();
        Jopcion = new javax.swing.JTextField();
        Consulta2 = new javax.swing.JButton();
        Combobox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(650, 650));
        getContentPane().setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jTable1.setToolTipText("");
        jTable1.setEnabled(false);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 220, 548, 253);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("Registro");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(50, 0, 90, 30);

        JIdProfesor.setText("Id Profesor");
        JIdProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JIdProfesorActionPerformed(evt);
            }
        });
        getContentPane().add(JIdProfesor);
        JIdProfesor.setBounds(40, 80, 150, 30);

        Jmateria.setText("Nombre Materia");
        getContentPane().add(Jmateria);
        Jmateria.setBounds(40, 40, 150, 30);

        jButton1.setText("Registrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(40, 120, 150, 30);

        jButton2.setText("Refrescar Tabla");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(380, 180, 140, 23);

        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(480, 20, 120, 23);

        Consulta1.setText("Consultar");
        Consulta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Consulta1ActionPerformed(evt);
            }
        });
        getContentPane().add(Consulta1);
        Consulta1.setBounds(450, 150, 130, 23);

        jButton4.setText("Volver a Inicio");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(240, 180, 140, 23);

        Eliminar1.setText("Id de la relaci√≥n a eliminar o a consultar");
        getContentPane().add(Eliminar1);
        Eliminar1.setBounds(210, 30, 260, 50);
        getContentPane().add(Jopcion);
        Jopcion.setBounds(390, 110, 210, 30);

        Consulta2.setText("Consultar");
        Consulta2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Consulta2ActionPerformed(evt);
            }
        });
        getContentPane().add(Consulta2);
        Consulta2.setBounds(480, 60, 120, 23);

        Combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Materia", "Id Profesor", " ", " " }));
        getContentPane().add(Combobox);
        Combobox.setBounds(250, 120, 120, 20);

        jLabel1.setText("Consultar Por:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(250, 100, 79, 14);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JIdProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JIdProfesorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JIdProfesorActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (Jmateria.getText().equals("Nombre Materia") || JIdProfesor.getText().equals("Id Profesor") || Jmateria.getText().length() == 0 || JIdProfesor.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Todos los campos deben ser completados");
        } else {
            if (this.isNumeric(JIdProfesor.getText())) {
                if (materiaManager.consultarMateriaPorNombre(Jmateria.getText()) != null && profesorManager.consultarProfesor(Integer.parseInt(JIdProfesor.getText())) != null) {
                    ProfesorMateriaDTO profesorMateria = new ProfesorMateriaDTO();
                    MateriaDTO materia = new MateriaDTO();
                    materia = materiaManager.consultarMateriaPorNombre(Jmateria.getText());
                    profesorMateria.setIdmateria(materia.getIdmateria());
                    profesorMateria.setIdProfesor(Integer.parseInt(JIdProfesor.getText()));
                    profesorMateriaManager.registrarProfesorMateria(profesorMateria);
                    this.jButton2ActionPerformed(evt);
                    Jmateria.setText("Nombre Materia");
                    JIdProfesor.setText("Id Profesor");
                } else {
                    JOptionPane.showMessageDialog(null, "El profesor o la materia no se encuentra registrado");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El Id del profesor debe ser numerico");
                JIdProfesor.setText("Id Profesor");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        modelo.setRowCount(0);
        ArrayList<ProfesorMateriaDTO> listaProfesorMateria = profesorMateriaManager.traerListaProfesorMateria();
        for (ProfesorMateriaDTO profesorMateria : listaProfesorMateria) {
            MateriaDTO materia = new MateriaDTO();
            ProfesorDTO profesor = new ProfesorDTO();
            materia = materiaManager.consultarMateria(profesorMateria.getIdmateria());
            profesor = profesorManager.consultarProfesor(profesorMateria.getIdProfesor());
            String Dato[] = ProfesorMateria.AgregarElementosTabla(profesorMateria, materia.getNombreMateria(), profesor.getNombre(), profesor.getApellidos());
            modelo.addRow(Dato);
        }

        jTable1.setModel(modelo);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        if (Eliminar1.getText().equals("Id de la relaci√≥n a eliminar o a consultar") || Eliminar1.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Debes ingresar algo en los campos");
        } else {
            if (this.isNumeric(Eliminar1.getText())) {
                if (profesorMateriaManager.consultarProfesorMateria(Integer.parseInt(Eliminar1.getText())) != null) {
                    profesorMateriaManager.eliminarProfesorMateria(Integer.parseInt(Eliminar1.getText()));
                    JOptionPane.showMessageDialog(null, "La relaci√≥n se ha eliminado");
                    this.jButton2ActionPerformed(evt);
                } else {
                    JOptionPane.showMessageDialog(null, "Ese Id no existe");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El Id debe ser numerico");
            }
        }

        Eliminar1.setText("Id de la relaci√≥n a eliminar o a consultar");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void Consulta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Consulta1ActionPerformed

        ProfesorMateriaDTO profesorMateria = new ProfesorMateriaDTO();
        MateriaDTO materia = new MateriaDTO();
        ProfesorDTO profesor = new ProfesorDTO();
        int i = Combobox.getSelectedIndex();

        if (i == 0) {
            if (Jopcion.getText().length() == 0) {
                JOptionPane.showMessageDialog(null, "Debes ingresar algo en los campos");
            } else {
                if (materiaManager.consultarMateriaPorNombre(Jopcion.getText()) != null) {
                    modelo.setRowCount(0);
                    materia = materiaManager.consultarMateriaPorNombre(Jopcion.getText());
                    ArrayList<ProfesorMateriaDTO> listaProfesorMateriaM = profesorMateriaManager.consultarProfesorMateriaPorMateria(materia.getIdmateria());
                    for (ProfesorMateriaDTO profesorMateriaM : listaProfesorMateriaM) {
                        profesor = profesorManager.consultarProfesor(profesorMateriaM.getIdProfesor());
                        String Dato[] = ProfesorMateria.AgregarElementosTabla(profesorMateriaM, materia.getNombreMateria(), profesor.getNombre(), profesor.getApellidos());
                        modelo.addRow(Dato);
                    }
                    Jopcion.setText("");
                } else {
                    JOptionPane.showMessageDialog(null, "Esa materia no existe");
                    Jopcion.setText("");
                }

            }
        } else if (i == 1) {
            if (Jopcion.getText().length() == 0) {
                JOptionPane.showMessageDialog(null, "Debes ingresar algo en los campos");
            } else {
                if (this.isNumeric(Jopcion.getText())) {
                    if (profesorManager.consultarProfesor(Integer.parseInt(Jopcion.getText())) != null) {
                        modelo.setRowCount(0);
                        profesor = profesorManager.consultarProfesor(Integer.parseInt(Jopcion.getText()));
                        ArrayList<ProfesorMateriaDTO> listaprofesorMateriaP = profesorMateriaManager.consultarProfesorMateriaPorProfesor(Integer.parseInt(Jopcion.getText()));
                        for (ProfesorMateriaDTO profesorMateriaP : listaprofesorMateriaP) {
                            materia = materiaManager.consultarMateria(profesorMateriaP.getIdmateria());
                            String Dato[] = ProfesorMateria.AgregarElementosTabla(profesorMateriaP, materia.getNombreMateria(), profesor.getNombre(), profesor.getApellidos());
                            modelo.addRow(Dato);
                        }
                        Jopcion.setText("");
                    } else {
                        JOptionPane.showMessageDialog(null, "Ese profesor No esta registrado");
                        Jopcion.setText("");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El id del profesor debe ser un caracter numerico");
                    Jopcion.setText("");
                }
            }
        }
    }//GEN-LAST:event_Consulta1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        InicioA c = new InicioA(profesorManager, planManager, descripcionManager, estudianteManager, gradoManager, gradoMateriaManager, grupoManager, materiaManager, notasManager, profesorMateriaManager);
        dispose();
        c.setVisible(true);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void Consulta2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Consulta2ActionPerformed

        if (Eliminar1.getText().equals("Id de la relaci√≥n a eliminar o a consultar") || Eliminar1.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Debes ingresar algo en los campos");
        } else {
            if (this.isNumeric(Eliminar1.getText())) {
                if (profesorMateriaManager.consultarProfesorMateria(Integer.parseInt(Eliminar1.getText())) != null) {
                    ProfesorMateriaDTO profesorMateria = new ProfesorMateriaDTO();
                    profesorMateria = profesorMateriaManager.consultarProfesorMateria(Integer.parseInt(Eliminar1.getText()));
                    modelo.setRowCount(0);
                    MateriaDTO materia = new MateriaDTO();
                    ProfesorDTO profesor = new ProfesorDTO();
                    materia = materiaManager.consultarMateria(profesorMateria.getIdmateria());
                    profesor = profesorManager.consultarProfesor(profesorMateria.getIdProfesor());
                    String Dato[] = ProfesorMateria.AgregarElementosTabla(profesorMateria, materia.getNombreMateria(), profesor.getNombre(), profesor.getApellidos());
                    modelo.addRow(Dato);
                } else {
                    JOptionPane.showMessageDialog(null, "Ese Id no existe");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El Id debe ser numerico");
            }
        }
        Eliminar1.setText("Id de la relaci√≥n a eliminar o a consultar");
    }//GEN-LAST:event_Consulta2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProfesorMateria().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Combobox;
    private javax.swing.JButton Consulta1;
    private javax.swing.JButton Consulta2;
    private javax.swing.JTextField Eliminar1;
    private javax.swing.JTextField JIdProfesor;
    private javax.swing.JTextField Jmateria;
    private javax.swing.JTextField Jopcion;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
